using Sirenix.OdinInspector;
using UnityEditor;
using UnityEngine;

namespace Unidork.Events
{
	/// <summary>
	/// Stores data generated by <see cref="GameEventLocator"/> to be used in custom editor windows that show
	/// information about which objects have a <see cref="GameEventListener"/> assigned, which events they are listening
	/// to and which methods are invoked when the respective event is raised.
	/// </summary>
	[System.Serializable]
	public class GameEventListenerReference
	{
		#region Fields

		/// <summary>
		/// String hollding all data about a game event listener: event it is listening for, ame object it is attached to, 
		/// component that it references, method that will be called on the referenced component. 
		/// </summary>
		[ReadOnly, HideLabel]
		public readonly string Data;

		/// <summary>
		/// Listener component itself.
		/// </summary>
		[InlineEditor(InlineEditorModes.GUIOnly)]
		public readonly GameEventListener Listener;

		/// <summary>
		/// Event that a listener is listening to.
		/// </summary>
		private readonly GameEvent @event;

		/// <summary>
		/// Game object that the even listener is attached to.
		/// </summary>
		private readonly GameObject gameObject;

		/// <summary>
		/// Component whose methods listener invokes.
		/// </summary>
		private readonly Component component;

		/// <summary>
		/// Name of the invoked method.
		/// </summary>
		private readonly string MethodName;

		[Button(ButtonSizes.Medium, Name = "JUMP TO")]
		public void JumpTo()
		{
			Selection.activeObject = gameObject;
		}

		#endregion

		#region Constructor

		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="listener">Listener component itself.</param>
		/// <param name="gameEvent">Event that a listener is listening to.</param>
		/// <param name="gameObject">Game object that the even listener is attached to.</param>
		/// <param name="component">Component whose methods listener invokes.</param>
		/// <param name="methodName">Name of the invoked method.</param>
		public GameEventListenerReference(GameEventListener listener, GameEvent gameEvent, GameObject gameObject, Component component, string methodName)
		{
			Listener = listener;
			@event = gameEvent;
			this.gameObject = gameObject;
			this.component = component;
			MethodName = methodName;

			Data = $"Event: {@event.name}. Method trace: {this.gameObject.name} => {this.component.name} => {MethodName}";
		}

		#endregion
	}
}