using Sirenix.OdinInspector;
using UnityEditor;
using UnityEngine;

namespace Unidork.Events
{
	/// <summary>
	/// Stores data generated by <see cref="GameEventLocator"/> to be used in custom editor windows that show
	/// information about which game events are assigned to which components on which game objects.
	/// </summary>
	[System.Serializable]
	public class GameEventReference
	{
		#region Fields

		/// <summary>
		/// Game event.
		/// </summary>
		internal readonly GameEvent GameEvent;

		/// <summary>
		/// Game object that <see cref="Component"/> is attached to.
		/// </summary>
		[Title("@this.GameEvent.name")]
		[ReadOnly]
		public readonly GameObject GameObject;

		/// <summary>
		/// Component that has a field of type GameEvent.
		/// </summary>
		[InlineEditor(InlineEditorModes.GUIOnly)]
		public readonly Component Component;

		/// <summary>
		/// Name of the field that contains the located event in the inspector.
		/// </summary>
		[ReadOnly]
		public readonly string InspectorName;

		[Button(ButtonSizes.Medium, Name = "JUMP TO")]
		public void JumpTo()
		{			
			Selection.activeObject = GameObject;

			/*// Highlighter.Highlight requires a particular string format to identify components "{Component name} (Script)"
			// so we're going to create the correctly-formatted string here

			string typeString = Component.GetType().ToString();

			string[] splitString = typeString.Split('.');

			typeString = splitString[splitString.Length - 1];
			typeString = typeString.SplitByCapitalLetters();

			Highlighter.Highlight("Inspector/Box Collider", "boxCollider");*/
		}

		#endregion

		#region Constructor

		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="gameEvent">Game event.</param>
		/// <param name="gameObject">Component that has a field of type GameEvent.</param>
		/// <param name="component">Game object that <paramref name="component"/> is attached to.</param>
		/// <param name="inspectorName">Name of the field that contains the located event in the inspector.</param>
		public GameEventReference(GameEvent gameEvent, GameObject gameObject, Component component, string inspectorName)
		{
			GameEvent = gameEvent;
			GameObject = gameObject;
			Component = component;
			InspectorName = inspectorName;
		}

		#endregion
	}
}